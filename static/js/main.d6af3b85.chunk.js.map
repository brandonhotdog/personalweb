{"version":3,"sources":["logo.svg","Vibe.js","PlanetSim.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Vibe","props","state","mood","this","React","Component","PlanetSim","PlanetX","PlanetY","PlanetVeloX","PlanetVeloY","MoonX","MoonY","MoonVeloX","MoonVeloY","height","width","setState","window","innerHeight","innerWidth","Force","displace","Math","sqrt","setInterval","intervSecond","style","backgroundColor","position","left","round","top","borderRadius","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,0ICE9BC,EAAb,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAM,UAHI,EADtB,qDAQQ,OAAO,qCAAWC,KAAKF,MAAMC,KAAtB,SARf,GAA0BE,IAAMC,WCAnBC,EAAb,kDACE,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXM,QAAS,EACTC,QAAS,GACTC,YAAa,EACbC,aAAc,IACdC,MAAO,IACPC,MAAO,EACPC,UAAW,EACXC,UAAW,EACXC,OAAQf,EAAMe,OACdC,MAAOhB,EAAMgB,OAZE,EADrB,iEAiBwB,IAAD,OACnBb,KAAKc,SAAS,CAAEF,OAAQG,OAAOC,cAC/BhB,KAAKc,SAAS,CAAED,MAAOE,OAAOE,aAC9B,IAGMC,EACH,OACA,SAAClB,KAAKF,MAAMM,QAAUJ,KAAKF,MAAMU,MAAU,GAA3C,SACER,KAAKF,MAAMO,QAAUL,KAAKF,MAAMW,MAAU,IACzCU,EAAWC,KAAKC,KACpB,SAACrB,KAAKF,MAAMM,QAAUJ,KAAKF,MAAMU,MAAU,GAA3C,SACGR,KAAKF,MAAMO,QAAUL,KAAKF,MAAMW,MAAU,IAE/Ca,aAAY,WACV,EAAKR,SAAS,CACZV,QAAS,EAAKN,MAAMM,QAbH,IAaa,EAAKN,MAAMQ,YACzCD,QAAS,EAAKP,MAAMO,QAdH,IAca,EAAKP,MAAMS,YACzCD,YACE,EAAKR,MAAMQ,YACXY,IACI,EAAKpB,MAAMM,QAAU,EAAKN,MAAMU,OAASW,GAlB9B,IAoBjBZ,YACE,EAAKT,MAAMS,YACXW,IACI,EAAKpB,MAAMO,QAAU,EAAKP,MAAMW,OAASU,GAvB9B,QA0BlBI,MA9CP,+BAkDI,OACE,yBACEC,MAAO,CACLX,MAAO,OACPD,OAAQZ,KAAKF,MAAMc,OACnBa,gBAAiB,YAGnB,yBACED,MAAO,CACLX,MAAO,GACPD,OAAQ,GACRa,gBAAiB,QACjBC,SAAU,WACVC,KAAMP,KAAKQ,MAAM5B,KAAKF,MAAMe,MAAQ,GAAKb,KAAKF,MAAMM,QAAU,GAC9DyB,IAAKT,KAAKQ,MAAM5B,KAAKF,MAAMc,OAAS,GAAKZ,KAAKF,MAAMO,QAAU,GAC9DyB,aAAc,SAGlB,yBACEN,MAAO,CACLX,MAAO,IACPD,OAAQ,IACRa,gBAAiB,QACjBC,SAAU,WACVC,KAAMP,KAAKQ,MAAM5B,KAAKF,MAAMe,MAAQ,GAAKb,KAAKF,MAAMU,MAAQ,GAC5DqB,IAAKT,KAAKQ,MAAM5B,KAAKF,MAAMc,OAAS,GAAKZ,KAAKF,MAAMW,MAAQ,GAC5DqB,aAAc,cA7E1B,GAA+B7B,IAAMC,WCgBtB6B,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,8CAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6af3b85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport class Vibe extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            mood: \"vibing\"\r\n        };\r\n    }\r\n    render(){\r\n        return <h1> I am {this.state.mood} </h1>;\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport class PlanetSim extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      PlanetX: 0,\r\n      PlanetY: 10,\r\n      PlanetVeloX: 0,\r\n      PlanetVeloY: -100,\r\n      MoonX: 400,\r\n      MoonY: 0,\r\n      MoonVeloX: 0,\r\n      MoonVeloY: 0,\r\n      height: props.height,\r\n      width: props.width,\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({ height: window.innerHeight });\r\n    this.setState({ width: window.innerWidth });\r\n    const intervSecond = 0.01;\r\n    const m1 = 1000;\r\n    const m2 = 100;\r\n    const Force =\r\n      (6.67e2 * m1 * m2) /\r\n      ((this.state.PlanetX - this.state.MoonX) ** 2 +\r\n        (this.state.PlanetY - this.state.MoonY) ** 2);\r\n    const displace = Math.sqrt(\r\n      (this.state.PlanetX - this.state.MoonX) ** 2 +\r\n        (this.state.PlanetY - this.state.MoonY) ** 2\r\n    );\r\n    setInterval(() => {\r\n      this.setState({\r\n        PlanetX: this.state.PlanetX + this.state.PlanetVeloX * intervSecond,\r\n        PlanetY: this.state.PlanetY + this.state.PlanetVeloY * intervSecond,\r\n        PlanetVeloX:\r\n          this.state.PlanetVeloX -\r\n          Force *\r\n            ((this.state.PlanetX - this.state.MoonX) / displace) *\r\n            intervSecond,\r\n        PlanetVeloY:\r\n          this.state.PlanetVeloY -\r\n          Force *\r\n            ((this.state.PlanetY - this.state.MoonY) / displace) *\r\n            intervSecond,\r\n      });\r\n    }, intervSecond * 1000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          height: this.state.height,\r\n          backgroundColor: \"#F2FF4F\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            width: 20,\r\n            height: 20,\r\n            backgroundColor: \"black\",\r\n            position: \"relative\",\r\n            left: Math.round(this.state.width / 2) + this.state.PlanetX + 10,\r\n            top: Math.round(this.state.height / 2) + this.state.PlanetY + 10,\r\n            borderRadius: \"50%\",\r\n          }}\r\n        ></div>\r\n        <div\r\n          style={{\r\n            width: 100,\r\n            height: 100,\r\n            backgroundColor: \"black\",\r\n            position: \"relative\",\r\n            left: Math.round(this.state.width / 2) + this.state.MoonX - 50,\r\n            top: Math.round(this.state.height / 2) + this.state.MoonY - 50,\r\n            borderRadius: \"50%\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Vibe } from \"./Vibe\";\nimport { PlanetSim } from \"./PlanetSim\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Brandon Smith</h1>\n      </header>\n      <Vibe />\n      <PlanetSim />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}